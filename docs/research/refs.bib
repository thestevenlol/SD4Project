@misc{neystadt2009,
  author       = {Neystadt, J.},
  title        = {Automated penetration testing with white-box fuzzing},
  year         = {2009},
  howpublished = {Microsoft Learn},
  note         = {Available at: \url{https://learn.microsoft.com/en-us/previous-versions/software-testing/cc162782(v=msdn.10)?redirectedfrom=MSDN} (Accessed: 28 September 2024)}
}

@ARTICLE{8839290,
  author={Pham, Van-Thuan and Böhme, Marcel and Santosa, Andrew E. and Căciulescu, Alexandru Răzvan and Roychoudhury, Abhik},
  journal={IEEE Transactions on Software Engineering}, 
  title={Smart Greybox Fuzzing}, 
  year={2021},
  volume={47},
  number={9},
  pages={1980-1997},
  keywords={Fuzzing;Computer bugs;Libraries;Tools;Dictionaries;Open area test sites;Schedules;Vulnerability detection;smart fuzzing;automated testing;file format;grammar;input structure},
  doi={10.1109/TSE.2019.2941681}}

@article{ALSAEDI202210068,
title = {Effective and scalable black-box fuzzing approach for modern web applications},
journal = {Journal of King Saud University - Computer and Information Sciences},
volume = {34},
number = {10, Part B},
pages = {10068-10078},
year = {2022},
issn = {1319-1578},
doi = {https://doi.org/10.1016/j.jksuci.2022.10.006},
url = {https://www.sciencedirect.com/science/article/pii/S1319157822003573},
author = {Aseel Alsaedi and Abeer Alhuzali and Omaimah Bamasag},
keywords = {Black-box fuzzing, Web application security, Dynamic features, Vulnerability analysis, Dynamic analysis, Constraint solving},
abstract = {Web applications’ security is critical because we share sensitive data through them frequently, which attracts attackers who exploit their vulnerabilities. Detecting and exploiting such vulnerabilities automatically is challenging because of the applications’ increasing complexity and strong dependence upon dynamic features such as JavaScript. In this paper, we propose an approach that addresses the difficulties presented in web applications by using dynamic analysis techniques in a black-box fashion to explore applications’ space. It also performs a client-side validation analysis to increase the coverage and therefore, identify more vulnerabilities. We implemented our approach with a tool and evaluated its effectiveness using real-world web applications. Our system discovered 207 unique URLs, submitted 102 web forms successfully, and exploited 32 vulnerabilities automatically. A detailed comparison of state-of-the-art black-box fuzzing approaches showed that our system exceeds them in coverage, the number of vulnerabilities detected, and performance.}
}

@ARTICLE{Blackwell2024-ao,
  title         = "{PrescientFuzz}: A more effective exploration approach for
                   grey-box fuzzing",
  author        = "Blackwell, Daniel and Clark, David",
  abstract      = "In this paper, we introduce an approach for improving the
                   early exploration of grey-box fuzzing campaigns; allowing
                   the fuzzer to reach the interesting coverage earlier. To do
                   this, it leverages information from the system under test's
                   (SUT's) control flow graph in order to decide which inputs
                   are likely to lead to discovering most coverage when
                   mutated.",
  month         =  apr,
  year          =  2024,
  copyright     = "http://creativecommons.org/licenses/by/4.0/",
  archivePrefix = "arXiv",
  primaryClass  = "cs.SE",
  eprint        = "2404.18887"
}
