// filepath: headers/corpus.h
#ifndef CORPUS_H
#define CORPUS_H

#include <time.h>
#include "coverage.h" // For coverage_t and COVERAGE_MAP_SIZE

// Structure for an entry in the corpus
typedef struct {
    int input_value;            // The input itself
    double fitness_score;       // Fitness score associated with this input
    int is_interesting;         // Flag (e.g., 1 if caused crash, new cov, etc.)
    time_t timestamp;           // When this entry was added/last updated
    coverage_t* coverage_map;   // Coverage map generated by this input (allocated per entry)
    // Add other metadata: path to file?, size?, number of times fuzzed?
} CorpusEntry;


// --- Corpus Management Functions ---

// Initialize the corpus (create directory, clear in-memory state)
// Returns 0 on success, -1 on failure
int initializeCorpus(const char* corpus_dir);

// Save an input and its associated data to the corpus (memory and disk)
// **FIX:** Add const to coverage_map parameter to match definition
int saveToCorpus(int input_value, const coverage_t* coverage_map, double fitness_score, int is_interesting);

// Load corpus entries from disk into memory (basic version)
// Returns the number of entries loaded, or -1 on error.
int loadCorpus(const char* corpus_dir);

// Minimize the corpus by removing redundant entries based on coverage
// Returns the new size of the corpus, or -1 on error.
int minimizeCorpus();

// Select an entry from the corpus (e.g., for mutation)
// Returns pointer to a corpus entry, or NULL if empty/error.
CorpusEntry* selectCorpusEntry();

// Clean up all memory used by the in-memory corpus
void cleanupCorpus(void);

// Get the current number of entries in the corpus
int getCorpusSize(void);

// Calculate the average fitness score of corpus entries
double getAverageCorpusFitness(void);

// Print statistics about the corpus
void printCorpusStats(void);


// --- Genetic Algorithm Corpus (byte-based) ---
#define MAX_TESTCASE_LEN 1024
#define CORPUS_CAPACITY 1024

// Structure for a test case (byte-based input)
typedef struct {
    uint8_t data[MAX_TESTCASE_LEN]; // Input buffer
    size_t len;                     // Length of data
    int fitness;                   // Number of new edges discovered
    coverage_t* coverage_map;      // Coverage map for this run
} TestCase;

// Initialize GA corpus with initial seed
void init_corpus(void);
// Select a parent from the corpus (for crossover)
TestCase* select_parent(void);
// Add a test case to the corpus if fitness > 0 (replace worst if full)
int add_to_corpus(const TestCase* tc);

#endif // CORPUS_H